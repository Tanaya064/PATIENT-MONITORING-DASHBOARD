# -*- coding: utf-8 -*-
"""PATIENT MONITORING DASHBOARD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qjwCoG5Y9-X7zs5VtfoSYPzwgACliEfL
"""

# Step 1 — Install Dependencies
!pip install plotly pandas scikit-learn dash jupyter-dash

# Step 2 — Imports
import pandas as pd
import numpy as np
import random
import time
from sklearn.tree import DecisionTreeClassifier
from jupyter_dash import JupyterDash
from dash import html, dcc
import plotly.express as px

# Step 3 — Simulate Patient Data
def generate_patient_data(num_entries=500):
    data = []
    for _ in range(num_entries):
        data.append({
            "PatientID": random.randint(1, 5),
            "HeartRate": random.randint(50, 120),
            "BP_Systolic": random.randint(80, 160),
            "BP_Diastolic": random.randint(60, 100),
            "SpO2": random.randint(90, 100)
        })
    return pd.DataFrame(data)

df = generate_patient_data()

# Step 4 — ML Model: Simple Classifier for Alerts
# Label: 0 = Normal, 1 = Alert
def label_data(row):
    if row["HeartRate"] < 60 or row["HeartRate"] > 100:
        return 1
    if row["BP_Systolic"] > 140 or row["BP_Systolic"] < 90:
        return 1
    if row["SpO2"] < 95:
        return 1
    return 0

df["Alert"] = df.apply(label_data, axis=1)

# Train a Decision Tree for demonstration
features = ["HeartRate", "BP_Systolic", "BP_Diastolic", "SpO2"]
X = df[features]
y = df["Alert"]

model = DecisionTreeClassifier()
model.fit(X, y)

# Step 5 — Predict alerts
df["PredictedAlert"] = model.predict(X)

from dash import Dash, html, dcc
import plotly.express as px

# Create Dash app
app = Dash(__name__)

# Create figure
fig = px.line(df, x=df.index, y="HeartRate", color="PatientID", title="Heart Rate Monitoring")

# Layout
app.layout = html.Div([
    html.H1("Patient Monitoring Dashboard"),
    dcc.Graph(figure=fig),
    html.H2("Patient Status Table"),
    dcc.Graph(
        figure=px.scatter(df, x="BP_Systolic", y="SpO2", color=df["PredictedAlert"].astype(str),
                          title="BP vs SpO₂ (Alert Classification)")
    ),
])

# Run Dash app inline in Colab
app.run(mode="inline", debug=True)